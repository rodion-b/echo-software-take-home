// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/httpserver/interfaces.go

// Package httpserver is a generated GoMock package.
package httpserver

import (
	context "context"
	domain "echo-software-take-home/internal/app/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceMockRecorder
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
	mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
	mock := &MockWalletService{ctrl: ctrl}
	mock.recorder = &MockWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockWalletService) CreateWallet(ctx context.Context, walletName string) (*domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, walletName)
	ret0, _ := ret[0].(*domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletServiceMockRecorder) CreateWallet(ctx, walletName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletService)(nil).CreateWallet), ctx, walletName)
}

// GetDepositAddress mocks base method.
func (m *MockWalletService) GetDepositAddress(ctx context.Context, vaultAccountId, assetId string) ([]*domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositAddress", ctx, vaultAccountId, assetId)
	ret0, _ := ret[0].([]*domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositAddress indicates an expected call of GetDepositAddress.
func (mr *MockWalletServiceMockRecorder) GetDepositAddress(ctx, vaultAccountId, assetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositAddress", reflect.TypeOf((*MockWalletService)(nil).GetDepositAddress), ctx, vaultAccountId, assetId)
}

// GetWalletBalance mocks base method.
func (m *MockWalletService) GetWalletBalance(ctx context.Context, vaultAccountId, assetId string) (*domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", ctx, vaultAccountId, assetId)
	ret0, _ := ret[0].(*domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockWalletServiceMockRecorder) GetWalletBalance(ctx, vaultAccountId, assetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockWalletService)(nil).GetWalletBalance), ctx, vaultAccountId, assetId)
}

// InititateTransfer mocks base method.
func (m *MockWalletService) InititateTransfer(ctx context.Context, vaultAccountId, assetId, amount, sourceAddress, destinationAddress string) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InititateTransfer", ctx, vaultAccountId, assetId, amount, sourceAddress, destinationAddress)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InititateTransfer indicates an expected call of InititateTransfer.
func (mr *MockWalletServiceMockRecorder) InititateTransfer(ctx, vaultAccountId, assetId, amount, sourceAddress, destinationAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InititateTransfer", reflect.TypeOf((*MockWalletService)(nil).InititateTransfer), ctx, vaultAccountId, assetId, amount, sourceAddress, destinationAddress)
}
