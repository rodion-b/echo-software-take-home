// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/interfaces.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	fireblocks "echo-software-take-home/internal/app/client/fireblocks"
	domain "echo-software-take-home/internal/app/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPgStorage is a mock of PgStorage interface.
type MockPgStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPgStorageMockRecorder
}

// MockPgStorageMockRecorder is the mock recorder for MockPgStorage.
type MockPgStorageMockRecorder struct {
	mock *MockPgStorage
}

// NewMockPgStorage creates a new mock instance.
func NewMockPgStorage(ctrl *gomock.Controller) *MockPgStorage {
	mock := &MockPgStorage{ctrl: ctrl}
	mock.recorder = &MockPgStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgStorage) EXPECT() *MockPgStorageMockRecorder {
	return m.recorder
}

// SaveWallet mocks base method.
func (m *MockPgStorage) SaveWallet(wallet *domain.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWallet", wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWallet indicates an expected call of SaveWallet.
func (mr *MockPgStorageMockRecorder) SaveWallet(wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWallet", reflect.TypeOf((*MockPgStorage)(nil).SaveWallet), wallet)
}

// MockFireblocksClient is a mock of FireblocksClient interface.
type MockFireblocksClient struct {
	ctrl     *gomock.Controller
	recorder *MockFireblocksClientMockRecorder
}

// MockFireblocksClientMockRecorder is the mock recorder for MockFireblocksClient.
type MockFireblocksClientMockRecorder struct {
	mock *MockFireblocksClient
}

// NewMockFireblocksClient creates a new mock instance.
func NewMockFireblocksClient(ctrl *gomock.Controller) *MockFireblocksClient {
	mock := &MockFireblocksClient{ctrl: ctrl}
	mock.recorder = &MockFireblocksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFireblocksClient) EXPECT() *MockFireblocksClientMockRecorder {
	return m.recorder
}

// CreateNewTransaction mocks base method.
func (m *MockFireblocksClient) CreateNewTransaction(ctx context.Context, payload fireblocks.CreateNewTransactionRequest) (*fireblocks.CreateNewTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewTransaction", ctx, payload)
	ret0, _ := ret[0].(*fireblocks.CreateNewTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewTransaction indicates an expected call of CreateNewTransaction.
func (mr *MockFireblocksClientMockRecorder) CreateNewTransaction(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewTransaction", reflect.TypeOf((*MockFireblocksClient)(nil).CreateNewTransaction), ctx, payload)
}

// CreateNewVaultAccount mocks base method.
func (m *MockFireblocksClient) CreateNewVaultAccount(ctx context.Context, payload fireblocks.CreateNewVaultAccountRequest, idempotencyKey string) (*fireblocks.CreateNewVaultAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewVaultAccount", ctx, payload, idempotencyKey)
	ret0, _ := ret[0].(*fireblocks.CreateNewVaultAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewVaultAccount indicates an expected call of CreateNewVaultAccount.
func (mr *MockFireblocksClientMockRecorder) CreateNewVaultAccount(ctx, payload, idempotencyKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewVaultAccount", reflect.TypeOf((*MockFireblocksClient)(nil).CreateNewVaultAccount), ctx, payload, idempotencyKey)
}

// GetAssetAddressPaged mocks base method.
func (m *MockFireblocksClient) GetAssetAddressPaged(ctx context.Context, vaultAccountId, assetId string) (*fireblocks.GetAssetAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetAddressPaged", ctx, vaultAccountId, assetId)
	ret0, _ := ret[0].(*fireblocks.GetAssetAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetAddressPaged indicates an expected call of GetAssetAddressPaged.
func (mr *MockFireblocksClientMockRecorder) GetAssetAddressPaged(ctx, vaultAccountId, assetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetAddressPaged", reflect.TypeOf((*MockFireblocksClient)(nil).GetAssetAddressPaged), ctx, vaultAccountId, assetId)
}

// GetAssetBalanceForVaultAccountId mocks base method.
func (m *MockFireblocksClient) GetAssetBalanceForVaultAccountId(ctx context.Context, vaultAccountId, assetId string) (*fireblocks.GetAssetBalanceForVaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetBalanceForVaultAccountId", ctx, vaultAccountId, assetId)
	ret0, _ := ret[0].(*fireblocks.GetAssetBalanceForVaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetBalanceForVaultAccountId indicates an expected call of GetAssetBalanceForVaultAccountId.
func (mr *MockFireblocksClientMockRecorder) GetAssetBalanceForVaultAccountId(ctx, vaultAccountId, assetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetBalanceForVaultAccountId", reflect.TypeOf((*MockFireblocksClient)(nil).GetAssetBalanceForVaultAccountId), ctx, vaultAccountId, assetId)
}
